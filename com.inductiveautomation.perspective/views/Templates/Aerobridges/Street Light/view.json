{
  "custom": {
    "deviceDescription": null,
    "deviceLocation": "Domestic",
    "deviceTagPath": "Domestic/Precinct/Domestic SPS/Street Lights",
    "tags": []
  },
  "params": {
    "alwaysVisible": false,
    "deviceName": "Street Lights",
    "deviceParentPath": "Domestic/Precinct/Domestic SPS",
    "fontSize": "clamp(4pt, calc(0.4*(1.0vmin + 1.0vmax)), 8pt)",
    "popupWindow": "Popups/Distribution Boards/Non Standard/ppuStreet Light"
  },
  "propConfig": {
    "custom.deviceDescription": {
      "binding": {
        "config": {
          "fallbackDelay": 2.5,
          "mode": "indirect",
          "references": {
            "deviceTagPath": "{view.custom.deviceTagPath}"
          },
          "tagPath": "{deviceTagPath}/Parameters.Alarm_ParentDevice"
        },
        "type": "tag"
      },
      "persistent": true
    },
    "custom.deviceLocation": {
      "binding": {
        "config": {
          "path": "view.params.deviceParentPath"
        },
        "transforms": [
          {
            "code": "\tword_to_search_1 \u003d \"International\"\n\tword_to_search_2 \u003d \"Domestic\"\n\t\n\tif word_to_search_1 in value:\n\t    result \u003d word_to_search_1\n\telif word_to_search_2 in value:\n\t    result \u003d word_to_search_2\n\telse:\n\t    result \u003d \"Neither word found\"\n\t\n\treturn(result)",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "persistent": true
    },
    "custom.deviceTagPath": {
      "binding": {
        "config": {
          "expression": "{view.params.deviceParentPath} + \u0027/\u0027 +\r\n{view.params.deviceName}"
        },
        "type": "expr"
      },
      "persistent": true
    },
    "custom.tags": {
      "binding": {
        "config": {
          "expression": "now()"
        },
        "transforms": [
          {
            "code": "    tags \u003d []\n    res \u003d system.tag.browse(self.custom.deviceTagPath, {\"recursive\": True})    \n    \n    for tag in res:\n        if not tag.get(\u0027hasChildren\u0027) and tag[\u0027valueSource\u0027] !\u003d \u0027expr\u0027:\n            # Get the full path of the tag\n            tagPath \u003d str(tag[\u0027fullPath\u0027])\n            # Extract tag name and parent path\n            last_slash_index \u003d tagPath.rfind(\u0027/\u0027)  # find the last occurrence of \u0027/\u0027\n            tagName \u003d tagPath[last_slash_index + 1:]  # tag name is the substring after the last \u0027/\u0027\n            tagParentPath \u003d tagPath[:last_slash_index]  # tag parent path is the substring before the last \u0027/\u0027\n            # Check if the tag is enabled\n            enabledPath \u003d \"{}.Enabled\".format(tagPath)\n            enabledTag \u003d system.tag.read(enabledPath)\n            if enabledTag.value:\n        \t    tags.append({\u0027tagName\u0027: tagName, \u0027tagParentPath\u0027: tagParentPath})\n    \n    return tags",
            "type": "script"
          }
        ],
        "type": "expr"
      },
      "persistent": true
    },
    "params.alwaysVisible": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.deviceName": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.deviceParentPath": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.fontSize": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.popupWindow": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 34,
      "width": 140
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "meta": {
              "name": "Label_0"
            },
            "position": {
              "basis": "140px",
              "grow": 1
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "expression": "{view.custom.deviceDescription}"
                  },
                  "type": "expr"
                }
              },
              "props.textStyle.fontSize": {
                "binding": {
                  "config": {
                    "path": "view.params.fontSize"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "classes": "UI/Text/Heading2",
                "fontWeight": "bold",
                "marginLeft": "2px"
              },
              "textStyle": {
                "color": "#2B2B2B"
              }
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "Symbol_Double",
              "tooltip": {
                "enabled": true
              }
            },
            "position": {
              "basis": "25px"
            },
            "propConfig": {
              "meta.visible": {
                "binding": {
                  "config": {
                    "expression": "tag ({view.custom.deviceTagPath}+\u0027/Alarm Summary/Active Unack\u0027)"
                  },
                  "transforms": [
                    {
                      "code": "\tif \tvalue \u003e 0:\n\t\tvalue \u003d 1\n\telse:\n\t\tvalue \u003d 0\n\t\t\n\treturn value",
                      "type": "script"
                    }
                  ],
                  "type": "expr"
                }
              },
              "position.display": {
                "binding": {
                  "config": {
                    "fallbackDelay": 2.5,
                    "mode": "indirect",
                    "references": {
                      "deviceTagPath": "{view.custom.deviceTagPath}"
                    },
                    "tagPath": "{deviceTagPath}/Alarm Summary/Active Unack"
                  },
                  "transforms": [
                    {
                      "code": "\tif \tvalue \u003e 0:\n\t\tvalue \u003d 1\n\telse:\n\t\tvalue \u003d 0\n\t\t\n\treturn value",
                      "type": "script"
                    }
                  ],
                  "type": "tag"
                }
              },
              "props.params.alarmSummary.parentPath": {
                "binding": {
                  "config": {
                    "expression": "{view.custom.deviceTagPath}"
                  },
                  "type": "expr"
                }
              },
              "props.params.device.name": {
                "binding": {
                  "config": {
                    "path": "view.params.deviceName"
                  },
                  "type": "property"
                }
              },
              "props.params.device.parentPath": {
                "binding": {
                  "config": {
                    "path": "view.params.deviceParentPath"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "params": {
                "alarmSummary": {
                  "enabled": true
                },
                "device": {
                  "enabled": false
                }
              },
              "path": "Shared/Alarms/Symbol",
              "style": {
                "marginLeft": "2px",
                "marginTop": "2px"
              }
            },
            "type": "ia.display.view"
          }
        ],
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "script": "\twidth \u003d self.page.props.dimensions.viewport.width\n\tprint(width)\n\tif width \u003e 1260:\n\t\tsystem.perspective.openPopup(self.view.custom.deviceTagPath, self.view.params.popupWindow, {\u0027deviceParentPath\u0027 : self.view.params.deviceParentPath, \u0027deviceName\u0027 : self.view.params.deviceName}, showCloseIcon \u003d False, draggable \u003d True)\n\telse:\n\t\tsystem.perspective.openPopup(self.view.custom.deviceTagPath, self.view.params.popupWindow, {\u0027deviceParentPath\u0027 : self.view.params.deviceParentPath, \u0027deviceName\u0027 : self.view.params.deviceName}, showCloseIcon \u003d False, draggable \u003d False)"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "FlexContainer"
        },
        "position": {
          "basis": "200px",
          "grow": 1
        },
        "props": {
          "style": {
            "backgroundColor": "#AAAAAA",
            "borderBottomLeftRadius": 5,
            "borderBottomRightRadius": 5,
            "borderTopLeftRadius": 5,
            "borderTopRightRadius": 5,
            "classes": "AMS/Button/Button-normal",
            "overflow": "hidden"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "events": {
      "dom": {
        "onContextMenu": {
          "config": {
            "draggable": true,
            "id": "aUyamkXs",
            "modal": false,
            "overlayDismiss": false,
            "resizable": true,
            "showCloseIcon": true,
            "type": "open",
            "viewParams": {
              "tags": "{view.custom.tags}"
            },
            "viewPath": "Shared/Popups/ppu_MultipleTagInfo",
            "viewportBound": false
          },
          "scope": "C",
          "type": "popup"
        }
      }
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "meta.visible": {
        "binding": {
          "config": {
            "path": "session.custom.visibility.aerobridges"
          },
          "transforms": [
            {
              "expression": "{value}||{view.params.alwaysVisible}",
              "type": "expression"
            }
          ],
          "type": "property"
        }
      }
    },
    "props": {
      "style": {
        "overflow": "hidden"
      }
    },
    "type": "ia.container.flex"
  }
}